name: Build, Test, Benchmark, and Dockerize

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build the BenchmarkingSandbox projects and create Docker image
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.get_sha.outputs.short_sha }}
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}
        token: ${{ secrets.GITHUB_TOKEN }}
        submodules: true
        fetch-depth: 0

    - name: Get short SHA
      id: get_sha
      run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Set Git protocol to HTTPS
      run: git config --global url."https://github.com//".insteadOf "git@github.com:"

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore BenchmarkingSandbox.sln
      working-directory: ${{ github.workspace }}

    - name: Build
      run: dotnet build --configuration Release BenchmarkingSandbox.sln

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: ${{ github.workspace }}/Src/*/bin/Release/net9.0/

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}
        token: ${{ secrets.GITHUB_TOKEN }}
        submodules: true

    - name: Checkout submodules
      run: git submodule update --init --recursive --depth=0

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Run unit tests
      run: dotnet test ${{ github.workspace }}/Tests/Benchmarking.Tests/BenchmarkingSandbox.Tests.csproj --configuration Release
      working-directory: ${{ github.workspace }}/Tests/Benchmarking.Tests

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ${{ github.workspace }}/Tests/*/TestResults/*.trx
      if: always()

  benchmark:
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      contains(github.event.pull_request.labels.*.name, 'run-benchmarks')
    strategy:
      matrix:
        benchmark:
        - AsyncLockBenchmark
        - AsyncPriorityQueueBenchmarks
        paramSet: [Small, Medium, Large]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Checkout submodules
        run: git submodule update --init --recursive --depth=0

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Build Benchmark Project
        run: dotnet build --configuration Release BenchmarkingSandbox.Runner.csproj
        working-directory: ${{ github.workspace }}/Src/Benchmarking.Runner

      - name: Run filtered benchmarks (${{ matrix.benchmark }} - ${{ matrix.paramSet }})
        run: dotnet run --project BenchmarkingSandbox.Runner.csproj --configuration Release --filter ${{ matrix.benchmark }} -- ${{ matrix.paramSet }}
        working-directory: ${{ github.workspace }}/Src/Benchmarking.Runner
        timeout-minutes: 15

      - name: Upload Benchmark Results (${{ matrix.benchmark }} - ${{ matrix.paramSet }})
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ matrix.benchmark }}-${{ matrix.paramSet }}
          path: |
            ${{ github.workspace }}/Src/Benchmarking.Runner/bin/Release/net9.0/BenchmarkDotNet.Artifacts/results/*.json
            ${{ github.workspace }}/Src/Benchmarking.Runner/bin/Release/net9.0/BenchmarkDotNet.Artifacts/results/*.md
            ${{ github.workspace }}/Src/Benchmarking.Runner/bin/Release/net9.0/BenchmarkDotNet.Artifacts/results/*.csv

      - name: Compare Against Baseline (${{ matrix.benchmark }} - ${{ matrix.paramSet }})
        run: |
          BASELINE_PATH=${{ github.workspace }}/Baselines/${{ matrix.benchmark }}-${{ matrix.paramSet }}.json
          if [ -f "$BASELINE_PATH" ]; then
            dotnet run --project ${{ github.workspace }}/tools/BenchmarkComparer.csproj -- $BASELINE_PATH ${{ github.workspace }}/Src/Benchmarking.Runner/bin/Release/net9.0/BenchmarkDotNet.Artifacts/results/*${{ matrix.benchmark }}*.json --threshold 5
          else
            echo "Baseline not found, skipping regression check for ${{ matrix.benchmark }} - ${{ matrix.paramSet }}."
          fi
        working-directory: ${{ github.workspace }}/Src/Benchmarking.Runner

      - name: Export Markdown Summary (${{ matrix.benchmark }} - ${{ matrix.paramSet }})
        run: |
          cp ${{ github.workspace }}/Src/Benchmarking.Runner/bin/Release/net9.0/BenchmarkDotNet.Artifacts/results/summary.md ${{ github.workspace }}/benchmark-summary-${{ matrix.benchmark }}-${{ matrix.paramSet }}.md
        if: github.event_name == 'pull_request'

      - name: Upload Markdown Summary (${{ matrix.benchmark }} - ${{ matrix.paramSet }})
        uses: actions/upload-artifact@v4
        with:
          name: summary-md-${{ matrix.benchmark }}-${{ matrix.paramSet }}
          path: ${{ github.workspace }}/benchmark-summary-${{ matrix.benchmark }}-${{ matrix.paramSet }}.md
        if: github.event_name == 'pull_request'

  summarize-benchmarks:
    needs: benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/download-artifact@v4
      with:
        path: ${{ github.workspace }}/summaries

    - name: Merge Summaries
      run: |
        find ${{ github.workspace }}/summaries -name "summary-md-*.md" -print0 | while IFS= read -r -d $'\0' file; do
          echo "--- $file ---" >> ${{ github.workspace }}/full-summary.md
          cat "$file" >> ${{ github.workspace }}/full-summary.md
          echo "" >> ${{ github.workspace }}/full-summary.md
        done
        if [ -s "${{ github.workspace }}/full-summary.md" ]; then
          echo "Full summary generated."
        else
          echo "No benchmark summary files found."
          touch ${{ github.workspace }}/full-summary.md
        fi

    - name: Comment on PR
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        path: ${{ github.workspace }}/full-summary.md

  dockerize:
    needs: [build, test, benchmark]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}
        token: ${{ secrets.GITHUB_TOKEN }}
        submodules: true

    - name: Checkout submodules
      run: git submodule update --init --recursive --depth=0

    - name: Set Git protocol to HTTPS
      run: git config --global url."https://github.com/".insteadOf "git@github.com:"

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Build and push Docker image
      env:
        DOCKER_REGISTRY: ghcr.io
        DOCKER_USERNAME: ${{ github.actor }}
        DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        IMAGE_NAME: benchmarking-sandbox
      run: |
        docker login $DOCKER_REGISTRY -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        docker build -t $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:${{ needs.build.outputs.sha }} -f docker/Dockerfile .
        docker push $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:${{ needs.build.outputs.sha }}
        docker tag $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:${{ needs.build.outputs.sha }} $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
        docker push $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
