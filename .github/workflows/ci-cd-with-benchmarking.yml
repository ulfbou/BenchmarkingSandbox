name: Build, Test, and Benchmark, and Dockerize

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build the BenchmarkingSandbox projects and create Docker image
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.get_sha.outputs.short_sha }}
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}
        token: ${{ secrets.GITHUB_TOKEN }}
        submodules: true

    - name: Checkout submodules
      run: git submodule update --init --recursive --depth=0

    - name: Get short SHA
      id: get_sha
      run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Set Git protocol to HTTPS
      run: git config --global url."https://github.com/".insteadOf "git@github.com:"

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore BenchmarkingSandbox.sln
      working-directory: .

    - name: Build
      run: dotnet build --configuration Release BenchmarkingSandbox.sln

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-output
        path: ${{ github.workspace }}/Src/*/bin/Release/net9.0/

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}
        token: ${{ secrets.GITHUB_TOKEN }}
        submodules: true

    - name: Checkout submodules
      run: git submodule update --init --recursive --depth=0

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Run unit tests
      run: |
        cd Tests/Benchmarking.Tests
        dotnet test --configuration Release BenchmarkingSandbox.Tests.csproj

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: ${{ github.workspace }}/Tests/*/TestResults/*.trx
      if: always()

  benchmark:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}
        token: ${{ secrets.GITHUB_TOKEN }}
        submodules: true

    - name: Checkout submodules
      run: git submodule update --init --recursive --depth=0

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Change working directory
      run: cd ${{ github.workspace }}/Src/Benchmarking.Runner

    - name: Run benchmarks
      run: dotnet run --project BenchmarkingSandbox.Runner.csproj --configuration Release

    - name: Upload Benchmark Results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: ${{ github.workspace }}/Src/Benchmarking.Runner/bin/Release/net9.0/BenchmarkDotNet.Artifacts/results/*.json
  
  dockerize:
    needs: [build, test, benchmark]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}
        token: ${{ secrets.GITHUB_TOKEN }}
        submodules: true

    - name: Checkout submodules
      run: git submodule update --init --recursive --depth=0

    - name: Set Git protocol to HTTPS
      run: git config --global url."https://github.com/".insteadOf "git@github.com:"

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Build and push Docker image
      env:
        DOCKER_REGISTRY: ghcr.io
        DOCKER_USERNAME: ${{ github.actor }}
        DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        IMAGE_NAME: benchmarking-sandbox
      run: |
        docker login $DOCKER_REGISTRY -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        docker build -t $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:${{ needs.build.outputs.sha }} -f docker/Dockerfile .
        docker push $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:${{ needs.build.outputs.sha }}
        docker tag $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:${{ needs.build.outputs.sha }} $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
        docker push $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
