name: Debug CI/CD Pipeline

on:
  push:
    branches:
      - Debug
  pull_request:

env:
  ASYNC_LOCKS_SUBMODULE_PATH: "${{ github.workspace }}/Src/Async.Locks"
  BENCHMARK_ARTIFACTS_ROOT: "${{ github.workspace }}/BenchmarkArtifacts"
  BENCHMARK_FULL_LOG_PATH: "${{ github.workspace }}/benchmark_full.log"
  BENCHMARK_LOGS_ROOT: "${{ github.workspace }}/BenchmarkLogs"
  BENCHMARK_PROFILE: "CI"
  BENCHMARK_RESULTS_DIR: "${{ github.workspace }}/BenchmarkResults"
  BENCHMARK_RUNNER_PROJECT_PATH: "${{ github.workspace }}/Src/Benchmarking.Runner/BenchmarkingSandbox.Runner.csproj"
  BENCHMARK_SOLUTION_PATH: "${{ github.workspace }}/BenchmarkingSandbox.sln"
  BENCHMARK_SUMMARIES_ROOT: "${{ github.workspace }}/BenchmarkSummaries"
  DOTNET_VERSION: "9.0.x"
  GITHUB_WORKSPACE: "${{ github.workspace }}"
  PROJECT_DIR: "${{ github.workspace }}/Src"
  PR_SUMMARY_PATH: "${{ github.workspace }}/benchmark-summary.md"
  RESULTS_DIR: "${{ github.workspace }}/TestResults"
  TEST_PROJECT_PATH: "${{ github.workspace }}/Tests/Benchmarking.Tests/BenchmarkingSandbox.Tests.csproj"
  TEST_RESULTS_DIRECTORY: "${{ github.workspace }}/TestResults"
  TEST_RESULTS_LOG_FILENAME: "test-results.trx"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository with Submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Debug - Verify Installed .NET Version
        run: dotnet --version

      - name: Debug - Environment Variables
        run: |
          echo "GITHUB_WORKSPACE: ${{ env.GITHUB_WORKSPACE }}"
          echo "BENCHMARK_ARTIFACTS_ROOT: ${{ env.BENCHMARK_ARTIFACTS_ROOT }}"
          echo "BENCHMARK_LOGS_ROOT: ${{ env.BENCHMARK_LOGS_ROOT }}"
          echo "BENCHMARK_SUMMARIES_ROOT: ${{ env.BENCHMARK_SUMMARIES_ROOT }}"
          echo "BENCHMARK_RESULTS_DIR: ${{ env.BENCHMARK_RESULTS_DIR }}"
          echo "PROJECT_DIR: ${{ env.PROJECT_DIR }}"
          echo "RESULTS_DIR: ${{ env.RESULTS_DIR }}"
          echo "PR_SUMMARY_PATH: ${{ env.PR_SUMMARY_PATH }}"
          echo "RUNNER_OS: ${{ runner.os }}"
          echo "RUNNER_WORKSPACE: ${{ runner.workspace }}"
          echo "RUNNER_TEMP: ${{ runner.temp }}"
          env | grep BENCHMARK

      - name: Ensure Benchmark Directories Exist
        run: |
          if [ -n "${{ env.BENCHMARK_ARTIFACTS_ROOT }}" ]; then
            mkdir -p "${{ env.BENCHMARK_ARTIFACTS_ROOT }}"
          else
            echo "BENCHMARK_ARTIFACTS_ROOT is empty! Skipping mkdir."
          fi

      - name: Ensure Benchmark Directories Exist - old version
        run: |
          [ -n "${{ env.BENCHMARK_ARTIFACTS_ROOT }}" ] && mkdir -p "${{ env.BENCHMARK_ARTIFACTS_ROOT }}"
          [ -n "${{ env.BENCHMARK_LOGS_ROOT }}" ] && mkdir -p "${{ env.BENCHMARK_LOGS_ROOT }}"
          [ -n "${{ env.BENCHMARK_SUMMARIES_ROOT }}" ] && mkdir -p "${{ env.BENCHMARK_SUMMARIES_ROOT }}"
        working-directory: ${{ env.GITHUB_WORKSPACE }}

      - name: Debug - Confirm Git Submodule Initialization
        run: git submodule update --init --recursive
        working-directory: ${{ env.GITHUB_WORKSPACE }}

      - name: Debug - Verify Git Submodule Initialization
        run: |
          git submodule status
          git submodule foreach 'echo $name $sha1 $sm_path'

      - name: Restore dependencies
        run: dotnet restore "${{ env.BENCHMARK_SOLUTION_PATH }}"

      - name: Compile BenchmarkingSandbox Runner
        run: dotnet build "${{ env.BENCHMARK_RUNNER_PROJECT_PATH }}" --configuration Release

      - name: Generate SHA Reference
        run: echo "SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Dependencies
        run: dotnet restore "${{ env.BENCHMARK_SOLUTION_PATH }}"

      - name: Build Test Projects
        run: dotnet build "${{ env.BENCHMARK_SOLUTION_PATH }}" --configuration Release

      - name: Run xUnit Tests
        run: dotnet test "${{ env.TEST_PROJECT_PATH }}" --logger "trx;LogFileName=${{ env.TEST_RESULTS_LOG_FILENAME }}" --results-directory "${{ env.TEST_RESULTS_DIRECTORY }}"

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: "${{ env.RESULTS_DIR }}"

  benchmark:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository with Submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Validate Submodule Integrity
        run: |
          if [ ! -d "${{ env.ASYNC_LOCKS_SUBMODULE_PATH }}" ]; then
            echo "Submodule Async.Locks is missing! Exiting..."
            exit 1
          fi

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Dependencies for Benchmarking
        run: dotnet restore "${{ env.BENCHMARK_SOLUTION_PATH }}"
        working-directory: ${{ env.GITHUB_WORKSPACE }}

      - name: Compile Benchmarking Project
        run: dotnet build "${{ env.BENCHMARK_RUNNER_PROJECT_PATH }}" --configuration Release
        working-directory: "${{ env.PROJECT_DIR }}/Benchmarking.Runner"

      - name: Debug - Before Running Benchmarks
        run: |
          echo "--- Listing files in ${{ env.PROJECT_DIR }}/Benchmarking.Runner ---"
          ls -la "${{ env.PROJECT_DIR }}/Benchmarking.Runner"
          echo "--- Listing files in ${{ env.BENCHMARK_RESULTS_DIR }} (before run) ---"
          ls -la "${{ env.BENCHMARK_RESULTS_DIR }}" || echo "BenchmarkResults directory does not exist yet."

      - name: Run Benchmarks (QuickCI Only) and Capture Log
        run: dotnet run --project "${{ env.BENCHMARK_RUNNER_PROJECT_PATH }}" --configuration Release -- --category "${{ env.BENCHMARK_PROFILE }}" --filter *Benchmark* > "${{ env.BENCHMARK_FULL_LOG_PATH }}" 2>&1
        working-directory: "${{ env.PROJECT_DIR }}/Benchmarking.Runner"
        continue-on-error: true

      - name: Upload Full Benchmark Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-full-log
          path: "${{ env.BENCHMARK_FULL_LOG_PATH }}"
        continue-on-error: true

      - name: Store and Upload Benchmark Results (if they exist)
        if: always()
        run: |
          echo "--- Checking and Uploading Benchmark Results from: ${{ env.BENCHMARK_RESULTS_DIR }} ---"
          if [ -d "${{ env.BENCHMARK_RESULTS_DIR }}" ]; then
            ls -la "${{ env.BENCHMARK_RESULTS_DIR }}"
            uses: actions/upload-artifact@v4
            with:
              name: benchmark-results
              path: "${{ env.BENCHMARK_RESULTS_DIR }}"
          else
            echo "Warning: Benchmark results directory not found at ${{ env.BENCHMARK_RESULTS_DIR }}."
          fi
        continue-on-error: true

      - name: Generate Summary for PRs (if results exist)
        if: always()
        run: |
          echo "--- Checking and Generating PR Summary at: ${{ env.PR_SUMMARY_PATH }} ---"
          if [ -f "${{ env.PR_SUMMARY_PATH }}" ]; then
            echo "### Benchmark Results for SHA $SHA" >> "${{ env.PR_SUMMARY_PATH }}"
            if [ -f "${{ env.BENCHMARK_RESULTS_DIR }}/*" ]; then
              cat "${{ env.BENCHMARK_RESULTS_DIR }}/*" >> "${{ env.PR_SUMMARY_PATH }}"
              echo "Appended benchmark results to ${{ env.PR_SUMMARY_PATH }}."
            else
              echo "Warning: No benchmark result files found in ${{ env.BENCHMARK_RESULTS_DIR }} to add to summary."
            fi
            cat "${{ env.PR_SUMMARY_PATH }}"
          else
            echo "Warning: PR summary file not found at ${{ env.PR_SUMMARY_PATH }}."
          fi
        continue-on-error: true

      - name: Upload Summary (if it exists)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-summary
          path: "${{ env.PR_SUMMARY_PATH }}"
        continue-on-error: true
