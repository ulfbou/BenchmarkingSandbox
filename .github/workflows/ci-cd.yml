name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  BENCHMARK_ARTIFACTS_ROOT: ${{ github.workspace }}/benchmark-artifacts
  BENCHMARK_LOGS_ROOT: ${{ github.workspace }}/benchmark-logs
  BENCHMARK_SUMMARIES_ROOT: ${{ github.workspace }}/benchmark-summaries

jobs:
  build:
    name: Build BenchmarkingSandbox
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.get_sha.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Get short SHA
        id: get_sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set Git protocol to HTTPS
        run: git config --global url."https://github.com//".insteadOf "git@github.com:"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore BenchmarkingSandbox.sln
        working-directory: ${{ github.workspace }}

      - name: Build
        run: dotnet build --configuration Release BenchmarkingSandbox.sln
        working-directory: ${{ github.workspace }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ${{ github.workspace }}/Src/**/bin/Release/net9.0/

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies (Tests)
        run: dotnet restore
        working-directory: ${{ github.workspace }}/Tests/Benchmarking.Tests

      - name: Build Tests
        run: dotnet build --configuration Release --no-restore
        working-directory: ${{ github.workspace }}/Tests/Benchmarking.Tests

      - name: Run Tests
        run: dotnet test ${{ github.workspace }}/Tests/Benchmarking.Tests/BenchmarkingSandbox.Tests.csproj --configuration Release --logger:"trx;LogFileName=test-results.trx" --results-directory:TestResults
        working-directory: ${{ github.workspace }}/Tests/Benchmarking.Tests

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ github.workspace }}/Tests/Benchmarking.Tests/TestResults/*.trx
        if: always()

  benchmark-pr:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'run-benchmarks')
    strategy:
      matrix:
        benchmark:
          - AsyncLockBenchmark
          - AsyncPriorityQueueBenchmark
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies (Benchmark Runner)
        run: dotnet restore
        working-directory: ${{ github.workspace }}/Src/Benchmarking.Runner

      - name: Build Benchmark Project
        run: dotnet build --configuration Release BenchmarkingSandbox.Runner.csproj
        working-directory: ${{ github.workspace }}/Src/Benchmarking.Runner

      - name: Create Artifacts Directory
        run: mkdir -p ${{ env.BENCHMARK_ARTIFACTS_ROOT }}
        working-directory: ${{ github.workspace }}

      - name: Run Contended AcquireRelease Benchmark
        if: matrix.benchmark == 'AsyncLockBenchmark'
        run: dotnet run --project BenchmarkingSandbox.Runner.csproj --configuration Release --filter "AsyncLockBenchmark.AcquireRelease_Contended*" --category QuickCI -- --ConcurrentTasks 3 --TimeoutMs 1 --IterationCount 10 --WarmupCount 5 --RunStrategy Throughput
        working-directory: ${{ github.workspace }}/Src/Benchmarking.Runner
        timeout-minutes: 15
        env:
          BDN_ARTIFACTS_PATH: ${{ env.BENCHMARK_ARTIFACTS_ROOT }}/${{ matrix.benchmark }}-pr
          LOGS_ROOT_PATH: ${{ env.BENCHMARK_LOGS_ROOT }}
          BENCHMARK_PROFILE: CI
          GITHUB_MATRIX_BENCHMARK: ${{ matrix.benchmark }}

      - name: Run Other Benchmarks
        if: matrix.benchmark != 'AsyncLockBenchmark'
        run: dotnet run --project BenchmarkingSandbox.Runner.csproj --configuration Release --filter "${{ matrix.benchmark }}*" --category QuickCI
        working-directory: ${{ github.workspace }}/Src/Benchmarking.Runner
        timeout-minutes: 10
        env:
          BDN_ARTIFACTS_PATH: ${{ env.BENCHMARK_ARTIFACTS_ROOT }}/${{ matrix.benchmark }}-pr
          LOGS_ROOT_PATH: ${{ env.BENCHMARK_LOGS_ROOT }}
          BENCHMARK_PROFILE: CI
          GITHUB_MATRIX_BENCHMARK: ${{ matrix.benchmark }}

      - name: Debug - List Benchmark Artifacts
        run: ls -R ${{ env.BENCHMARK_ARTIFACTS_ROOT }}
        if: always() # Ensure this runs even if benchmarks fail

      - name: Upload Benchmark Results (${{ matrix.benchmark }})
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ matrix.benchmark }}-pr
          path: ${{ env.BENCHMARK_ARTIFACTS_ROOT }}/${{ matrix.benchmark }}-pr/results

      - name: Export PR Markdown Summary (${{ matrix.benchmark }})
        run: |
          mkdir -p ${{ env.BENCHMARK_SUMMARIES_ROOT }}
          LATEST_MD=$(ls -t ${{ env.BENCHMARK_ARTIFACTS_ROOT }}/${{ matrix.benchmark }}-pr/results/*.md | head -n 1)
          if [ -n "$LATEST_MD" ]; then
            cp "$LATEST_MD" ${{ env.BENCHMARK_SUMMARIES_ROOT }}/summary-md-pr-${{ matrix.benchmark }}.md
          else
            echo "No Markdown summary found for ${{ matrix.benchmark }} (PR)."
            touch ${{ env.BENCHMARK_SUMMARIES_ROOT }}/summary-md-pr-${{ matrix.benchmark }}.md
          fi
        if: github.event_name == 'pull_request'
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}

      - name: Upload PR Markdown Summary (${{ matrix.benchmark }})
        uses: actions/upload-artifact@v4
        with:
          name: summary-md-pr-${{ matrix.benchmark }}
          path: ${{ env.BENCHMARK_SUMMARIES_ROOT }}/summary-md-pr-${{ matrix.benchmark }}.md
        if: github.event_name == 'pull_request'

  summarize-benchmarks-pr:
    needs: benchmark-pr
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: summary-md-pr-*
          path: ${{ env.BENCHMARK_SUMMARIES_ROOT }}

      - name: Merge PR Summaries
        run: |
          mkdir -p ${{ github.workspace }}/logs/pr-full-summary # Keeping this path for the comment
          find ${{ env.BENCHMARK_SUMMARIES_ROOT }} -name "summary-md-pr-*.md" -print0 | while IFS= read -r -d $'\0' file; do
            echo "--- $file ---" >> ${{ github.workspace }}/logs/pr-full-summary/pr-full-summary.md
            cat "$file" >> ${{ github.workspace }}/logs/pr-full-summary/pr-full-summary.md
            echo "" >> ${{ github.workspace }}/logs/pr-full-summary/pr-full-summary.md
          done
          if [ -s "${{ github.workspace }}/logs/pr-full-summary/pr-full-summary.md" ]; then
            echo "Full PR summary generated."
          else
            echo "No PR benchmark summary files found."
            touch ${{ github.workspace }}/logs/pr-full-summary/pr-full-summary.md
          fi

      - name: Comment on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: ${{ github.workspace }}/logs/pr-full-summary/pr-full-summary.md
          header: "Benchmark Results (Quick PR Run)"

  dockerize:
    needs: [build, test, benchmark-pr]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build and push Docker image
      env:
        DOCKER_REGISTRY: ghcr.io
        DOCKER_USERNAME: ${{ github.actor }}
        DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        IMAGE_NAME: benchmarking-sandbox
      run: |
        docker login $DOCKER_REGISTRY -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        docker build -t $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:${{ needs.build.outputs.sha }} -f docker/Dockerfile .
        docker push $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:${{ needs.build.outputs.sha }}
        docker tag $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:${{ needs.build.outputs.sha }} $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
        docker push $DOCKER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
